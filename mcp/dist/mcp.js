#!/usr/bin/env node
(()=>{var t={188:(t,e,o)=>{const{z:i}=o(569);t.exports={ENDPOINTS:{OPEN_INSTANCE:"/electron/open-instance",LIST_OF_WINDOWS:"/electron/list-of-windows",GET_LIST_OF_ORGS:"/org/list",GET_SESSION_ID_AND_SERVER_URL:"/org/session",SOQL_QUERY:"/soql/query",SOQL_QUERIES:"/soql/queries",REST_API_EXECUTE:"/api/execute",REST_API_SCRIPTS:"/api/scripts",SOQL_NAVIGATE_TAB:"/soql/navigate-tab",NAVIGATION_NAVIGATE:"/navigation/navigate"}}},229:t=>{"use strict";t.exports=require("node-fetch")},317:t=>{"use strict";t.exports=require("child_process")},499:(t,e,o)=>{const i=o(229),{z:s}=o(569),{handleFetchWithToolkitCheck:n}=o(605),{ENDPOINTS:a}=o(188);t.exports={register:function(t,e){t.tool("Navigation_navigate","This tool allows you to navigate to a specific application within the SF Toolkit. \n        Ensure that the SF Toolkit is open for the specified alias before using this tool to successfully direct the navigation.",{alias:s.string().describe("Alias of the org"),application:s.enum(["soql","api","anonymousapex","org","metadata","access","sobject","documentation","platformevent","package"]).describe("Target application to navigate to")},(async t=>{const o=await n(i(`${e.apiUrl}${a.NAVIGATION_NAVIGATE}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}));return o.content?o:o.response.ok?{content:[{type:"text",text:o.data.message}]}:{content:[{type:"text",text:o.data.message||"Navigation failed"}]}}))}}},526:(t,e,o)=>{const i=o(229),{handleFetchWithToolkitCheck:s}=o(605),{z:n}=o(569),{ENDPOINTS:a}=o(188);t.exports={register:function(t,e){t.tool("SOQL_displayQueryInSFToolkit","Display the query (SOQL) in the SF Toolkit",{query:n.string().describe("The query to display"),alias:n.string().describe("The alias of the org"),tabId:n.string().describe("The ID of the SOQL tab to navigate to").optional()},(async o=>{const n=`${e.apiUrl}${a.SOQL_QUERY}`;console.info(JSON.stringify(o)),t.sendLoggingMessage({level:"info",data:`endpoint: ${n}`});const r=await s(i(n,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)}));return t.sendLoggingMessage({level:"info",data:`SOQL_displayQueryInSFToolkit: ${JSON.stringify(r)}`}),r.content?r:r.response.ok?{content:[{type:"text",text:JSON.stringify(r.data)}]}:{content:[{type:"text",text:r.data.message||"SOQL display failed"}]}})),t.tool("SOQL_navigateTab","Navigate to a specific SOQL tab in the SF Toolkit for a given org alias and tabId",{tabId:n.string().describe("The ID of the SOQL tab to navigate to"),alias:n.string().describe("The alias of the org")},(async t=>{const o=await s(i(`${e.apiUrl}${a.SOQL_NAVIGATE_TAB}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}));return o.content?o:o.response.ok?{content:[{type:"text",text:o.data.message||"Tab navigation successful"}]}:{content:[{type:"text",text:o.data.message||"Tab navigation failed"}]}})),t.tool("SOQL_fetchQueries","Fetch the list of SOQL queries for a given org alias in the SF Toolkit",{alias:n.string().describe("The alias of the org")},(async t=>{const o=await s(i(`${e.apiUrl}${a.SOQL_QUERIES}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}));return o.content?o:o.response.ok?{content:[{type:"text",text:JSON.stringify(o.data)}]}:{content:[{type:"text",text:o.data.message||"Fetch queries failed"}]}}))}}},569:t=>{"use strict";t.exports=require("zod")},605:t=>{t.exports={handleFetchWithToolkitCheck:async function(t){try{const e=await t;let o;try{o=await e.json()}catch(t){o=await e.text()}return{response:e,data:o}}catch(t){return{content:[{type:"text",text:`SF Toolkit is not open. Please open the SF Toolkit first using the global.openToolkitProtocol tool. \n                        Error :${JSON.stringify(t)}\n                    `}]}}}}},737:t=>{"use strict";t.exports=require("@modelcontextprotocol/sdk/server/mcp.js")},795:(t,e,o)=>{const i=o(229),{z:s}=o(569),{handleFetchWithToolkitCheck:n}=o(605),{ENDPOINTS:a}=o(188);t.exports={register:function(t,e){t.tool("Org_getListOfOrgs","Get list of orgs that are stored in the local storage. The list of orgs includes the orgs that are stored in the local storage and the orgs that are stored in the sfdx orgs.",(async t=>{console.log("fetch",`${e.apiUrl}${a.GET_LIST_OF_ORGS}`);const o=await n(i(`${e.apiUrl}${a.GET_LIST_OF_ORGS}`,{method:"POST",headers:{"Content-Type":"application/json"}}));return o.content?o:{content:[{type:"text",text:JSON.stringify(o.data.orgs)}]}})),e.isOauthDisabled||t.tool("Org_getSessionIdAndServerUrl","Fetch sessionId and serverUrl for a given org or alias.",{alias:s.string().describe("Alias of the org")},(async t=>{const o=await n(i(`${e.apiUrl}${a.GET_SESSION_ID_AND_SERVER_URL}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}));return o.content?o:{content:[{type:"text",text:JSON.stringify(o.data)}]}}))}}},802:t=>{"use strict";t.exports=require("@modelcontextprotocol/sdk/server/stdio.js")},811:(t,e,o)=>{const i=o(229),{handleFetchWithToolkitCheck:s}=o(605),{ENDPOINTS:n}=o(188),{z:a}=o(569);t.exports={register:function(t,e){t.tool("RestAPI_restAPI","Execute a REST API call for a given org alias in the SF Toolkit",{alias:a.string().describe("The alias of the org"),method:a.string().describe("The HTTP method to use (GET, POST, PUT, DELETE)"),endpoint:a.string().describe("The endpoint to call, e.g. /services/data/v63.0/sobjects/Account"),headers:a.record(a.string()).optional().describe("Headers as a key-value object"),body:a.string().optional().describe("The body of the request"),tabId:a.string().optional().describe("The ID of the REST API tab to navigate to")},(async t=>{const o=await s(i(`${e.apiUrl}${n.REST_API_EXECUTE}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}));return o.content?o:o.response.ok?{content:[{type:"text",text:JSON.stringify(o.data)}]}:{content:[{type:"text",text:o.data.message||"Run API failed"}]}})),t.tool("RestAPI_getListOfSavedAPIScripts","Fetch the list of saved API scripts for a given org alias in the SF Toolkit",{alias:a.string().describe("The alias of the org")},(async t=>{const o=await s(i(`${e.apiUrl}${n.REST_API_SCRIPTS}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}));return o.content?o:o.response.ok?{content:[{type:"text",text:JSON.stringify(o.data)}]}:{content:[{type:"text",text:o.data.message||"Fetch scripts failed"}]}}))}}},818:t=>{"use strict";t.exports=require("dotenv")},922:(t,e,o)=>{const{z:i}=o(569),s=o(229),{exec:n}=o(317),{handleFetchWithToolkitCheck:a}=o(605),{ENDPOINTS:r}=o(188);t.exports={register:function(t,e){t.tool("global_listOfWindows","Get list of opened windows (sf-toolkit). Call this tool to check if a window is already open for the alias.",{},(async(t,o)=>{const i=await a(s(`${e.apiUrl}${r.LIST_OF_WINDOWS}`,{method:"POST",headers:{"Content-Type":"application/json"}}));return i.content?i:{content:[{type:"text",text:`List of windows:\n${i.data.windows.map((t=>`- ${t}`)).join("\n")}`}]}})),t.tool("global_openSpecificOrg","Launch the SF Toolkit using a specified org alias.\n        Ensure the alias is valid before invoking this tool. \n        Utilize the Org.getListOfOrgs tool to retrieve and verify the desired alias from the list of orgs.\n        Determine if a window is already open for the alias by using the global.listOfWindows tool.\n        - If a window is open, return a status of Success and proceed.\n        - If not, initiate the Salesforce Toolkit for the org by invoking the internal.openSfToolkit tool with the org's alias and username.\n            - Only the alias and username parameters should be provided.\n            - Exclude serverUrl and sessionId when using the alias.\n        ",{alias:i.string().describe("Alias of the org"),username:i.string().describe("Username of the org").optional()},(async(t,o)=>{const i=await a(s(`${e.apiUrl}${r.OPEN_INSTANCE}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}));return i.content?i:i.response.ok?{content:[{type:"text",text:"Status : Success"}]}:{content:[{type:"text",text:"string"==typeof i.data?i.data:"Failed to open instance"}]}})),t.tool("global_openToolkitProtocol","Open the SF Toolkit using the 'sf-toolkit://' protocol. If the toolkit is not already open, this will launch it via the OS shell.",{},(async t=>new Promise((t=>{n('open "sf-toolkit://"',((e,o,i)=>{t(e?{content:[{type:"text",text:`Failed to open SF Toolkit: ${i||e.message}`}]}:{content:[{type:"text",text:"SF Toolkit has been opened using the sf-toolkit:// protocol."}]})}))}))))}}}},e={};function o(i){var s=e[i];if(void 0!==s)return s.exports;var n=e[i]={exports:{}};return t[i](n,n.exports,o),n.exports}o(818).config();const{McpServer:i}=o(737),{StdioServerTransport:s}=o(802),n=o(526),a=o(811),r=o(922),l=o(795),c=o(499);try{!async function(){const t=new i({name:"sf-toolkit-mcp-server",version:"1.0.0"}),e={mainWindow:null,isDev:!1,ipcMainManager:null,apiUrl:`${process.env.API_HOST||"http://localhost"}:${process.env.API_PORT||12346}`,isOauthDisabled:process.env.OAUTH_DISABLED||!1};r.register(t,e),l.register(t,e),n.register(t,e),c.register(t,e),a.register(t,e);const o=new s;await t.connect(o)}()}catch(t){console.error("Failed to start server:",t),process.exit(1)}module.exports={}})();